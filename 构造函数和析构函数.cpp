#include <iostream>
using namespace std;
/*
4.2对象的初始化和清理
・生活中我们买的电子产品都基本会有出厂设置，在某一天我们不用时候也会删除一些自己信息数据保证安全
・C++中的面向对象来源于生活，每个对象也都会有初始设置以及对象销毁前的清理数据的设置。
4.2.1构造函数和析构函数
对象的初始化和清理也是两个非常重要的安全问题
一个对象或者变量没有初始状态，对其使用后果是未知
同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题c++利用了构造函数和析构函数解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。
对象的初始化和清理工作是编译器强制要我们做的事情，因此如果我们不提供构造和析构，编译器会提供编译器提供的构造函数和析构函数是空实现。
・构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。
・析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。
*/

//1、构造函数
class Person
{
public:
	//1、构造函数
	//没有返回值不用写void
	//函数名与类名相同
	//构造函数可以有参数，可以发生重载
	//创建对象时。构造函数会自动调用，且只调用一次
	Person()
	{
		cout << "构造函数的调用" << endl;

	}
	//2.析构函数
//2.析构函数进行清理的操作
//没有返回值不写void
// 函数名和类名相同在名称前加~
//析构函数不可以有参数的，不可以发生重载
//对象在销毁前会自动调用析构函数，而且只会调用一次
	~Person()
	{
		cout << "析构函数的调用" << endl;

	}
};



void Text01()
{
	Person P;//因为P在栈上,text01结束完会释放，函数结束前调用了析构函数

}
int main()
{
	Text01();//构造和析构函数如果我们不提供,编译器也会提供



	Person P;
	system("pause");//此时P在
}